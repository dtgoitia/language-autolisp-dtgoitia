# AutoLISP snippets by @dtgoitia
# Extended
'.source.autolisp':
  # Custom snippets
  'defun':
    prefix: 'defun'
    body:   '
    (defun c:1 () (c:${1:name}) )\n(defun c:${1:MIRROR-name} ( / old_error old_sysvars )\n\n\t; SAVE SETTINGS\n\t; (save_environment (list "osmode" "angdir" "angbase"))\n\t\n\t${2:--- start here your program ---}\n\t\n\t; RESTORE SETTINGS\n\t; (restore_environment)\n\n\t(princ)\n\n\t; v0.0 - _DATE_ - First issue\n\t; Author: David Torralba\n\t; Last revision: _DATE_\n);END defun'
  'error handling and setting management functions':
    prefix: 'env'
    body:   '''
    (save_environment (list "osmode" "angdir" "angbase"))
    (restore_environment)
    '''
  'defun c\:1()':
    prefix: 'defun1'
    body:   '(defun c:1 () $0 )'
  'defun c\:xx()':
    prefix: 'dex'
    body:   '''
      (defun c:xx ()
      \t$0

      \t; v0.0 - ${1:_DATE_} - First issue
      \t; Author: David Torralba
      \t; Last revision: ${1:_DATE_}
      )
    '''
  'issue':
    prefix: 'issue'
    body:   '''
      \t; v0.0 - ${1:_DATE_} - First issue
      \t; Author: David Torralba
      \t; Last revision: ${1:_DATE_}
    '''
  'test princ':
    prefix: 'princt'
    body:   '(princ "\\\\n${1:variable} = ")(princ ${1:variable})$2'
  'test function princ':
    prefix: 'princf'
    body:   '(princ "\\\\n")(princ \'${1:function})(princ "\\\\n")(princ ${1:function})$2'
  'OK':
    prefix: 'ok'
    body:   '(princ "\\\\nOK")'
  'foreach ename':
    prefix: 'foreach ename'
    body:   '''
    (foreach a ${1:list}
      (if (= 'ename (type (cadr a)))
        ${2:single_function}
      );END if
    );END foreach
    '''
  'while grread':
    prefix: 'grread'
    body:   '''
      (while (= 5 (car (setq gr (grread 't 13 0))))
        ${1:functions}
      );END while
    '''
  # Conversion Functions
  '(atof str)':
    prefix:  'stringToReal'
    body:    '(atof ${1:str})'
    description:        'Converts a string into a real number'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-8618A388-E4CF-40E1-813B-057367DD1840-htm.html'
  '(atoi str)':
    prefix:  'stringToInteger'
    body:    '(atoi ${1:str})'
    description:        'Converts a string into a real number'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-20EF237C-7079-4E29-860C-B8531D6C7F36-htm.html'
  '(itoa int)':
    prefix:  'integerToString'
    body:    '(itoa ${1:integer})'
    description:        'Returns the conversion of an integer into a string'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-7E247CA3-95D3-4497-BDE2-6EB0E727DD4D-htm.html'

  # dtgoitia library
  '(DT:Arg function argumentList)':
    prefix: 'argMan'
    body:   '(DT:Arg \'${1:functionName} \'(${2:argumentList}))'
  'argument':
    prefix: 'arg'
    body:   '(${1:argumentSymbol} \'${2:argumentType})$3'
  '(DT:PrintVar var)':
    prefix: 'print'
    body:   '(DT:PrintVar \'${1:var})'
  '(DT:Error sym str)':
    prefix:  'error'
    body:    '(DT:Error \'${1:functionName} ${2:errorMessage})'
    description: 'Print message on console correctly formated'
  '(DT:SetText ename str)':
    prefix:  'setText'
    body:    '(DT:SetText ${1:ename} ${2:str})'
    description: 'Updates entity text content, if possible'
  '(DT:GetText ename str)':
    prefix:  'getText'
    body:    '(DT:GetText ${1:ename})'
    description: 'Returns entity text content, if any'
  '(DT:AddLayer layerName layerColor layerLineType)':
    prefix:  'dtaddLayer'
    body:    '(DT:AddLayer ${1:layerName} ${2:layerColor} ${3:layerLineType})'
    description:        'Create a new layer and set name, color and linetype.'
  '(DT:ZoomToEntity ename)':
    prefix:  'dtZoomToEntity',
    body:    '(DT:ZoomToEntity ${1:ename})',
    description: 'Zoom to entity'

  # Lee Mac library
  'LM effectivename':
    prefix: 'LM effective'
    body:   '(LM:effectivename ${1:object})'
  'LM VL Get Attribute Value':
    prefix: 'lmGetAtt'
    body:   '(LM:vl-getattributevalue ${1:object} ${2:attributeTag})'
  'LM VL Get All Attribute Value':
    prefix: 'lmGetAtts'
    body:   '(LM:vl-getattributes ${1:object})'
  'LM VL Set Attribute Value':
    prefix: 'lmSetAtt'
    body:   '(LM:vl-setattributevalue ${1:object} ${2:attributeTag} ${3:attributeValue})'

  # entmakex
  'entmakex INSERT':
    prefix:  'entmakexInsert'
    body:    '''
    (entmakex
      (list
        (cons 0 "INSERT")
        (cons 2 ${1:blockName})
        (cons 10 ${2:insertionPoint})
      );END list
    );END entmakex
    '''
    description: 'INSERT entmakex minimum structure'
  'entmakex CIRCLE':
    prefix:  'entmakexCircle'
    body:    '''
    (entmakex
      (list
        (cons 0 "CIRCLE")
        (cons 10 ${1:centrePoint})
        (cons 40 ${2:radius})
      );END list
    );END entmakex
    '''
    description: 'CIRCLE entmakex minimum structure'
  'entmakex LINE':
    prefix:  'entmakexLine'
    body:    '''

    (entmakex
      (list
        (cons 0 "LINE")
        (cons 10 ${1:startPoint})
        (cons 11 ${2:endPoint})
      );END list
    );END entmakex
    '''
    description: 'LINE entmakex minimum structure'
  'entmakex TEXT':
    prefix:  'entmakexText'
    body:    '''
    (entmakex
      (list
        (cons 0 "TEXT")
        (cons 1 ${1:content})
        (cons 10 '(0.0 0.0 0.0))
        (cons 11 ${2:insertionPoint})
        (cons 40 ${3:textSize})
        (cons 72 1)
      );END list
    );END entmakex
    '''
    description: 'TEXT entmakex minimum structure'
  'entmakex MTEXT':
    prefix:  'entmakexMtext'
    body:    '''
    (entmakex
      (list
        (cons 0 "MTEXT")
        (cons 100 "AcDbEntity")
        (cons 100 "AcDbMText")
        (cons 1 ${1:content})
        (cons 10 ${2:insertionPoint})
      );END list
    );END entmakex
    '''
    description:        'description'

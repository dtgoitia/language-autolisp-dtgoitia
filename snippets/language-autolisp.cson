# AutoLISP snippets by @dtgoitia
# Extended
'.source.autolisp':
  # Custom snippets
  'active document object':
    prefix: 'doc'
    body: '(vla-get-ActiveDocument (vlax-get-acad-object))'
  # 'defun':
  #   prefix: 'defun'
  #   body:   '
  #   (defun c:1 () (c:${1:name}) )\n(defun c:${1:MIRROR-name} ( / old_error old_sysvars )\n\n\t; SAVE SETTINGS\n\t; (save_environment (list "osmode" "angdir" "angbase"))\n\t\n\t${2:--- start here your program ---}\n\t\n\t; RESTORE SETTINGS\n\t; (restore_environment)\n\n\t(princ)\n\n\t; v0.0 - _DATE_ - First issue\n\t; Author: David Torralba\n\t; Last revision: _DATE_\n);END defun'
  'defun':
    prefix: 'defun'
    body:   '''
    (defun c:${2:name} ()
      ; Command version of DT:${2:name}
      (DT:${2:name})

      ; v0.0 - ${1:_DATE_} - First issue
      ; Author: David Torralba
      ; Last revision: ${1:_DATE_}
    )
    (defun DT:${2:name} ()
      ; ${3:DT:${2:name} function description}
      $0

      ; v0.0 - ${1:_DATE_} - First issue
      ; Author: David Torralba
      ; Last revision: ${1:_DATE_}
    )
    '''
  'error handling and setting management functions':
    prefix: 'env'
    body:   '''
    (save_environment (list "osmode" "angdir" "angbase"))
    (restore_environment)
    '''
  'defun c\:1()':
    prefix: 'defun1'
    body:   '(defun c:1 () $0 )'
  'defun c\:xx()':
    prefix: 'dex'
    body:   '''
      (defun ${3:c:${4:xx}} ()
      \t$0${2:

        ; v0.0 - ${1:_DATE_} - First issue
        ; Author: David Torralba
        ; Last revision: ${1:_DATE_}}
      )
    '''
  'issue':
    prefix: 'issue'
    body:   '''
      ; v0.0 - ${1:_DATE_} - First issue
      ; Author: David Torralba
      ; Last revision: ${1:_DATE_}
    '''
  'test princ':
    prefix: 'princt'
    body:   '(princ "\\\\n${1:variable} = ")(princ ${1:variable})$2'
  'test function princ':
    prefix: 'princf'
    body:   '(princ "\\\\n")(princ \'${1:function})(princ "\\\\n")(princ ${1:function})$2'
  'OK':
    prefix: 'ok'
    body:   '(princ "\\\\nOK")'
  'foreach ename':
    prefix: 'foreach ename'
    body:   '''
    (foreach a ${1:list}
      (if (= 'ename (type (cadr a)))
        ${2:single_function}
      );END if
    );END foreach
    '''
  'foreach (ssnamex ss)':
    prefix:  'ssforeach'
    body:    '''
    (if (setq ${1:ss} (ssget))
      (foreach a (ssnamex ${1:ss})
        (if (= 'ename (type (cadr a)))
          ${2:(progn
            $3
          );END progn}
        );END if
      );END foreach
    );END if
    '''
    description:        'description'
    descriptionMoreURL: 'documentationURL'
  'while grread':
    prefix: 'grread'
    body:   '''
      (while (= 5 (car (setq gr (grread 't 13 0))))
        ${1:functions}
      );END while
    '''
  'ename -> vla':
    prefix: 'ename2vla'
    body:   '(vlax-ename->vla-object ${1:ename})'
  '(vla-GetBoundingBox object minPoint maxPoint)':
    prefix:  'vla-GetBoundingBox'
    body:    '(vla-GetBoundingBox ${1:object} \'${2:minPoint} \'${3:maxPoint})'
    description: 'Asigns object\'s bounding box minium and maximum coordinates to minPoint and maxPoint respectively'
  'ssget AND':
    prefix: 'ssAnd'
    body:   '(-4 . \"<AND\")$0(-4 . \"AND>\")'
  'ssget OR':
    prefix: 'ssOr'
    body:   '(-4 . \"<OR\")$0(-4 . \"OR>\")'
  'ssget NOT':
    prefix: 'ssNot'
    body:   '(-4 . \"<NOT\")$0(-4 . \"NOT>\")'
  'ssget XOR':
    prefix: 'ssXor'
    body:   '(-4 . \"<XOR\")$0(-4 . \"XOR>\")'
  'subcond':
    prefix: 'scond'
    body:   '(${1:condition}\n\t${2:functions}\n);END subcond'
  'clean command line':
    prefix:  'CleanCommandLine'
    body:    '(CleanCommandLine)'
    description:        'Print many "\n" to clean command line.'

  # Conversion Functions
  '(atof str)':
    prefix:  'stringToReal'
    body:    '(atof ${1:str})'
    description:        'Converts a string into a real number'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-8618A388-E4CF-40E1-813B-057367DD1840-htm.html'
  '(atoi str)':
    prefix:  'stringToInteger'
    body:    '(atoi ${1:str})'
    description:        'Converts a string into a real number'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-20EF237C-7079-4E29-860C-B8531D6C7F36-htm.html'
  '(fix number)':
    prefix:  'realtoInteger'
    body:    '(fix ${1:number})'
    description:        'Returns the conversion of a real number into the nearest smaller integer'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2016/ENU/AutoCAD-AutoLISP/files/GUID-93B5F13B-348E-49E0-A116-0861684506D5-htm.html'
  '(float number)':
    prefix:  'integerToReal'
    body:    '(float ${1:number})'
    description:        'Returns the conversion of a number into a real number'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2016/ENU/AutoCAD-AutoLISP/files/GUID-93808F66-808C-49F7-9303-F12C55296080-htm.html'
  '(itoa int)':
    prefix:  'integerToString'
    body:    '(itoa ${1:integer})'
    description:        'Returns the conversion of an integer into a string'
    descriptionMoreURL: 'https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/AutoCAD-AutoLISP/files/GUID-7E247CA3-95D3-4497-BDE2-6EB0E727DD4D-htm.html'

  # dtgoitia library
  '(DT:Arg function argumentList)':
    prefix: 'argMan'
    body:   '(DT:Arg \'${1:functionName} \'(${2:argumentList}))'
  'argument':
    prefix: 'arg'
    body:   '(${1:argumentSymbol} \'${2:argumentType})$3'
  '(DT:PrintVar var)':
    prefix: 'print'
    body:   '(DT:PrintVar \'${1:var})'
  '(DT:Error sym str)':
    prefix:  'DT:Error'
    body:    '(DT:Error \'${1:functionName} ${2:errorMessage})'
    description: 'Print message on console correctly formated'
  '(DT:SetText ename str)':
    prefix:  'DT:SetText'
    body:    '(DT:SetText ${1:ename} ${2:str})'
    description: 'Updates entity text content, if possible'
  '(DT:GetText ename)':
    prefix:  'DT:GetText'
    body:    '(DT:GetText ${1:ename})'
    description: 'Returns entity text content, if any'
  '(DT:AddLayer layerName layerColor layerLineType)':
    prefix:  'dtaddLayer'
    body:    '(DT:AddLayer ${1:layerName} ${2:layerColor} ${3:layerLineType})'
    description:        'Create a new layer and set name, color and linetype.'
  '(DT:ZoomToEntity ename)':
    prefix:  'dtZoomToEntity',
    body:    '(DT:ZoomToEntity ${1:ename})',
    description: 'Zoom to entity'
  '(DT:SetGroup list)':
    prefix:  'DT:SetGroup',
    body:    '(DT:SetGroup ${1:enameList})',
    description: 'Create a group with the passed entities'
  '(DT:ListToTable list)':
    prefix:  'DT:ListToTable',
    body:    '(DT:ListToTable ${1:list})',
    description: 'Return the provided list as a table'
  '(DT:StringifyTableList list)':
    prefix:  'DT:StringifyTableList',
    body:    '(DT:StringifyTableList ${1:list})',
    description: 'Convert all elements withing the list in strings'
  '(DT:Delete ename)':
    prefix:  'DT:Delete'
    body:    '(DT:Delete ${1:ename})'
    description: 'Delete the passed entity and confirm if it\'s been deleted. Return T if succesfully deleted, otherwise nil.'
  '(DT:EntityType ename)':
    prefix:  'DT:EntityType'
    body:    '(DT:EntityType ${1:ename})'
    description: 'Return a string with ename entity type (INSERT, CIRCLE, LINE...).'
  '(DT:GetCurrentSpace)':
    prefix:  'DT:GetCurrentSpace'
    body:    '(DT:GetCurrentSpace)'
    description: 'Return current space: model space (0), paper space (1), locked viewport (2), unlocked viewport (3)'
  '(DT:AutoLoadFileFromCivil filename)':
    prefix:  'DT:AutoLoadFileFromCivil'
    body:    '(DT:AutoLoadFileFromCivil "${1:filename}.lsp")'
    description:        'Load file from %username%/projects/civil-autolisp/'
  '(DT:AutoLoadFileFromCivilTemp filename)':
    prefix:  'DT:AutoLoadFileFromCivilTemp'
    body:    '(DT:AutoLoadFileFromCivilTemp "${1:filename}.lsp")'
    description: 'Load file from %username%/projects/civil-autolisp-TEMP/'
  '(DT:OffSet ent_name distance targetPoint)':
    prefix:  'DT:OffSet'
    body:    '(DT:OffSet ${1:ent_name} ${2:distance} ${3:targetPoint})'
    description: 'Offset function'
  '(DT:MidPoint p1 p2)':
    prefix:  'DT:MidPoint'
    body:    '(DT:MidPoint ${1:p1} ${2:p2})'
    description: 'Return the middle point between points p1 and p2.'
  '(DT:ReadableTextAngle angle)':
    prefix:  'DT:ReadableTextAngle'
    body:    '(DT:ReadableTextAngle ${1:angle})'
    description: 'Return the readable equivalent angle of the provided angle.'
  'DT trigger boilerplate':
    prefix:  'dt trigger'
    body:    '''
    (defun c:xx ()
      ; Trigger
      (defun *error* ( errorMessage ) (princ (strcat "n-------- ERROR: " errorMessage " --------n")) (vl-bt) (DT:ReportError))
      (DT:AutoLoadFileFromCivilTemp "ErrorTracing.lsp")
      (DT:AutoLoadFileFromCivilTemp "${1:currentFile}.lsp")
      (c:${2:entryFunction})

      ; v0.0 - ${3:_DATE_} - First issue
      ; Author: David Torralba
      ; Last revision: ${3:_DATE_}
    )$4
    '''
    description: 'Boilerplate code to set a trigger to autoload the file from AutoCAD. Only for development purposes.'
  '(DT:GetBoundingBox ename)':
    prefix:  'DT:GetBoundingBox'
    body:    '(DT:GetBoundingBox ${1:ename})'
    description: 'Return a list with the coordinates of bounding box of entity passed.'
  '(DT:RadToDeg angle)':
    prefix:  'DT:RadToDeg'
    body:    '(DT:RadToDeg ${1:angle})'
    description: 'Return angle in sexagesimal degrees'
  '(DT:DegToRad angle)':
    prefix:  'DT:DegToRad'
    body:    '(DT:DegToRad ${1:angle})'
    description: 'Return angle in radians'
  '(DT:SortAlphanumeric list)':
    prefix:  'DT:SortAlphanumeric'
    body:    '(DT:SortAlphanumeric ${1:listToSort})'
    description: 'Return a listToSort sorted alphanumerically'
  '(DT:clic_or_type_level)':
    prefix:  'DT:clic_or_type_level'
    body:    '(DT:clic_or_type_level)'
    description:        'Asks user to input a number by typing it or clicking on a text which contains number'
  '(DT:GetLwpolyPoints ename)':
    prefix:  'DT:GetLwpolyPoints'
    body:    '(DT:GetLwpolyPoints ${1:ename})'
    description:        'Return a list with the coordinates of every verted of passed entity name (ename)'
  '(DT:SubList l ii fi)':
    prefix:  'DT:SubList'
    body:    '(DT:SubList ${1:l} ${2:ii} ${3:fi})'
    description:        'Return a slice of l'


# Lee Mac library
  '(LM:EffectiveName obj)':
    prefix: 'LM:EffectiveName '
    body:   '(LM:EffectiveName ${1:blockObject})'
    description: 'Return passed object block name, if any.'
    descriptionMoreURL: 'http://www.lee-mac.com/effectivename.html'
  '(LM:rtos real units prec)':
    prefix: 'LM:rtos '
    body:   '(LM:rtos ${1:real} ${2:units} ${3:precision})'
    description: 'Converts a number into a string.'
    descriptionMoreURL: 'http://www.lee-mac.com/consistentrtos.html'

  # List manipulation
  '(LM:SubstNth a n l)':
    prefix:  'LM:SubstNth'
    body:    '(LM:SubstNth ${1:item} ${2:position} ${3:list})'
    description:        'Return "l" list after substituting "n"-th item for "a" item'
    descriptionMoreURL: 'http://www.lee-mac.com/substn.html'

  # Attribute Functions
  '(LM:vl-getattributevalue blk tag)':
    prefix:  'LM:vl-getattributevalue'
    body:    '(LM:vl-getattributevalue ${1:blockObject} ${2:tag})'
    description: 'Returns the value held by the specified tag within the supplied block, if present.'
    descriptionMoreURL: 'http://www.lee-mac.com/attributefunctions.html'
  '(LM:vl-setattributevalue blk tag val)':
    prefix:  'LM:vl-setattributevalue'
    body:    '(LM:vl-setattributevalue ${1:blockObject} ${2:tag} ${3:value})'
    description: 'Sets the value of the first attribute with the given tag found within the block, if present.'
    descriptionMoreURL: 'http://www.lee-mac.com/attributefunctions.html'
  '(LM:vl-setattributevalues blk lst)':
    prefix:  'LM:vl-setattributevalues'
    body:    '(LM:vl-setattributevalues ${1:blockObject} ${2:lst})'
    description: 'Sets attributes with tags found in the association list to their associated values.'
    descriptionMoreURL: 'http://www.lee-mac.com/attributefunctions.html'
  '(LM:vl-getattributes blk)':
    prefix:  'LM:vl-getattributes'
    body:    '(LM:vl-getattributes ${1:blockObject})'
    description: 'Returns an association list of attributes present in the supplied block.'
    descriptionMoreURL: 'http://www.lee-mac.com/attributefunctions.html'

  # Dynamic Block Functions
  '(LM:GetDynPropValue blk prp)':
    prefix: 'LM:GetDynPropValue'
    body: '(LM:GetDynPropValue ${1:blockObject} ${2:property})'
    description: 'Returns the value of a Dynamic Block property (if present)'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:SetDynPropValue blk prp val)':
    prefix: 'LM:SetDynPropValue'
    body: '(LM:SetDynPropValue ${1:blockObject} ${2:property} ${3:value})'
    description: 'Modifies the value of a Dynamic Block property (if present)'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:GetDynProps blk)':
    prefix: 'LM:GetDynProps'
    body: '(LM:GetDynProps ${1:blockObject})'
    description: 'Returns an association list of Dynamic Block properties & values.'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:SetDynProps blk lst)':
    prefix: 'LM:SetDynProps'
    body: '(LM:SetDynProps ${1:blockObject} ${2:lst})'
    description: 'Modifies values of Dynamic Block properties using a supplied association list.'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:GetDynPropAllowedValues blk prp)':
    prefix:  'LM:GetDynPropAllowedValues'
    body:    '(LM:GetDynPropAllowedValues ${1:blockObject} ${2:property})'
    description: 'Returns the allowed values for a specific Dynamic Block property.'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:ToggleFlipState blk)':
    prefix:  'LM:ToggleFlipState'
    body:    '(LM:ToggleFlipState ${1:blockObject})'
    description:        'Toggles the Flip parameter if present in a supplied Dynamic Block.'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:GetVisibilityState blk)':
    prefix: 'LM:GetVisibilityState'
    body: '(LM:GetVisibilityState ${1:blockObject})'
    description: 'Returns the value of the Visibility Parameter of a Dynamic Block (if present)'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'
  '(LM:SetVisibilityState blk val)':
    prefix: 'LM:SetVisibilityState'
    body: '(LM:SetVisibilityState ${1:blockObject} ${2:value})'
    description: 'Sets the Visibility Parameter of a Dynamic Block (if present) to a specific value (if allowed)'
    descriptionMoreURL: 'http://www.lee-mac.com/dynamicblockfunctions.html'



  # entmakex
  'entmakex INSERT':
    prefix:  'entmakexInsert'
    body:    '''
    (entmakex
      (list
        (cons 0 "INSERT")
        (cons 2 ${1:blockName})
        (cons 10 ${2:insertionPoint})
      );END list
    );END entmakex
    '''
    description: 'INSERT entmakex minimum structure'
  'entmakex CIRCLE':
    prefix:  'entmakexCircle'
    body:    '''
    (entmakex
      (list
        (cons 0 "CIRCLE")
        (cons 10 ${1:centrePoint})
        (cons 40 ${2:radius})
      );END list
    );END entmakex
    '''
    description: 'CIRCLE entmakex minimum structure'
  'entmakex LINE':
    prefix:  'entmakexLine'
    body:    '''

    (entmakex
      (list
        (cons 0 "LINE")
        (cons 10 ${1:startPoint})
        (cons 11 ${2:endPoint})
      );END list
    );END entmakex
    '''
    description: 'LINE entmakex minimum structure'
  'entmakex LWPOLYLINE':
    prefix:  'entmakexLwPolyline'
    body:    '''
    (entmakex
      (append
        (list
          (cons   0 "LWPOLYLINE")
          (cons 100 "AcDbEntity")
          (cons 100 "AcDbPolyline")
          (cons  70 0) ; Open(0)/Closed(1)
          (cons  90 (length ${1:pointList})) ; Number of vertices
        )
        (mapcar
          '(lambda (pt) (cons 10 pt) )
          ${1:pointList}
        );END mapcar
      );END append
    )
    '''
    description: 'LWPOLYLINE entmakex minimum structure'
  'entmakex TEXT':
    prefix:  'entmakexText'
    body:    '''
    (entmakex
      (list
        (cons 0 "TEXT")
        (cons 1 ${1:content})
        (cons 10 '(0.0 0.0 0.0))
        (cons 11 ${2:insertionPoint})
        (cons 40 ${3:textSize})
        (cons 72 1)
      );END list
    );END entmakex
    '''
    description: 'TEXT entmakex minimum structure'
  'entmakex MTEXT':
    prefix:  'entmakexMtext'
    body:    '''
    (entmakex
      (list
        (cons 0 "MTEXT")
        (cons 100 "AcDbEntity")
        (cons 100 "AcDbMText")
        (cons 1 ${1:content})
        (cons 10 ${2:insertionPoint})
      );END list
    );END entmakex
    '''
    description: 'MTEXT entmakex minimum structure'
  'entmakex POINT':
    prefix:  'entmakexPoint'
    body:    '''
    (entmakex
      (list
        (cons 0 "POINT")
        (cons 10 ${2:point})
      );END list
    );END entmakex
    '''
    description: 'POINT entmakex minimum structure'
